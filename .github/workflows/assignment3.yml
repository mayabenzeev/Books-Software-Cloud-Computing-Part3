on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record start time
        run: echo "$(date -Iminutes)" > /tmp/log.txt

      - name: Record submitters names
        run: echo "Maya Ben Zeev, Noga Brenner, Eden Zehavy" >> /tmp/log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image to tarfile
        run: |
          if docker-compose build --no-cache; then
            echo "image successfully built" >> /tmp/log.txt
            else
            echo "image not able to be built" >> /tmp/log.txt
            exit 1 
          fi

      - name: Export images to a tar file
        run: |
            BOOKS_SERVICE_IMAGE=$(docker images --format "{{.Repository}}" | grep "books-service" | head -n 1)
            docker save -o /tmp/books-service.tar $BOOKS_SERVICE_IMAGE

      - name: Upload books image artifact
        uses: actions/upload-artifact@v3
        with:
          name: books-service-image
          path: /tmp/books-service.tar

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: books-service-image
          path: /tmp

      - name: Load Docker images from previous workflows
        run: |
          docker load --input /tmp/books-service.tar

      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: log
          path: /tmp

      - name: Check images are loaded
        run: docker image ls

      - name: Start Docker Compose - Run containers on built images
        run: |
          if docker-compose up -d; then
            echo "Container up and running" >> /tmp/log.txt
          else
            echo "Container failed to run" >> /tmp/log.txt
            exit 1
          fi

      - name: Check container is running
        run: |
          docker ps

      # Set up python env for running tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.7'
          update-environment: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests 
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          cd tests
          if pytest -v assn3_tests.py > assn3_test_results.txt; then
            echo "tests succeeded" >> /tmp/log.txt
          else
            echo "tests failed" >> /tmp/log.txt
            exit 1
          fi

      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt
          overwrite: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: assn3_test_results
          path: tests/assn3_test_results.txt

      - name: Shut down docker compose
        if: always()
        run: docker-compose down
            

  query:
    needs: test
    runs-on: ubuntu-latest
    env:
      BOOKS_URL: 'http://127.0.0.1:5001/books'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: books-service-image
          path: /tmp

      - name: Load Docker images from previous workflows
        run: |
          docker load --input /tmp/books-service.tar

      - name: Start Docker Compose
        run: |
          if docker-compose up -d; then
            echo "Container up and running" >> /tmp/log.txt
          else
            echo "Container failed to run" >> /tmp/log.txt
            exit 1
          fi

      - name: Wait for the server to start
        run: sleep 5

      - name: Check container is running
        run: docker ps

      - name: Post Books to Initialize Data
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"title": "Adventures of Huckleberry Finn", "ISBN": "9780520343641", "genre": "Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "The Best of Isaac Asimov", "ISBN": "9780385050784", "genre": "Science Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "Fear No Evil", "ISBN": "9780394558783", "genre": "Biography"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "The Adventures of Tom Sawyer", "ISBN": "9780195810400", "genre": "Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "I, Robot", "ISBN": "9780553294385", "genre": "Science Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "Second Foundation", "ISBN": "9780553293364", "genre": "Science Fiction"}' ${{ env.BOOKS_URL }}      

      - name: Issue Queries and Record Results
        run: |
          set -e
          touch response.txt
          if [ ! -f query.txt ]; then
            echo "query.txt file not found!" >&2
            exit 1
          fi
          
          while read -r line; do
            echo "Processing query: $line"
            echo "query: $line" >> response.txt
            
            response=$(curl -s -w "\n%{http_code}" "${BOOKS_URL}$line")

            status_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | head -n -1)
            
            echo "HTTP status code: $status_code"
            
            if [[ "$status_code" -eq 200 ]]; then
              echo "response: $response_body" >> response.txt
            else
              echo "response: error $status_code" >> response.txt
            fi
          done < query.txt

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: response
          path: response.txt

      - name: Shut down Docker Compose
        if: always()

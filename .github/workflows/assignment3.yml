on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Record start time
      run:
        echo "$(date -Iminutes)" > log.txt

    - name: Record submitter names
      run:
        echo "Maya Ben Zeev, Noga Brenner, Eden Zehavy" >> log.txt

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        context: ./book-service
        outputs: type=docker, dest=/tmp/image.tar

    - name: Status on Build with Docker image
      if: success()
      run: |
        echo "image successfully built" >> log.txt

    - name: Status on Build with Docker image
      if: failure()
      run: |
          echo "image not able to be built" >> log.txt
          exit 1

    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: book-service
        path: /tmp/image.tar

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: |
          /tmp/log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifacts@v4

    - name: Load Docker images from previous workflows
      run: docker load --input tmp/image.tar

    - name: check books image is loaded
      run: docker image ls

    - name: Load logfile from previous workflows
      uses: actions/download-artifacts@v4
      with:
        name: logs
        path: /tmp

    - name: Start Docker Compose
      run: |
        if docker-compose up -d; then
          echo "Container up and running" >> log.txt
        else
          echo "Container failed to run" >> log.txt
          exit 1
        fi

    - name: Check container is running
      run: |
        docker ps
        docker exec books-service ls -laR /app

    - name: Execute pytest inside the container
      run: |
        cd tests
        if docker exec books-service python -m pytest -v assn3_tests.py > assn3_test_results.txt; then
          echo "tests succeeded" >> log.txt
        else
          echo "tests failed" >> log.txt
          exit 1
        fi

    - name: Upload test results and logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-and-logs
        path: |
          log.txt
          /app/tests/assn3_test_results.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    env:
      BOOKS_URL: 'http://127.0.0.1:5001/books'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Start Docker Compose
        run: docker-compose up -d

      - name: Check container is running
        run: docker ps

      - name: Post Books to Initialize Data
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"title": "Adventures of Huckleberry Finn", "ISBN": "9780520343641", "genre": "Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "The Best of Isaac Asimov", "ISBN": "9780385050784", "genre": "Science Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "Fear No Evil", "ISBN": "9780394558783", "genre": "Biography"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "The Adventures of Tom Sawyer", "ISBN": "9780195810400", "genre": "Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "I, Robot", "ISBN": "9780553294385", "genre": "Science Fiction"}' ${{ env.BOOKS_URL }}
          curl -X POST -H "Content-Type: application/json" -d '{"title": "Second Foundation", "ISBN": "9780553293364", "genre": "Science Fiction"}' ${{ env.BOOKS_URL }}

      - name: Issue Queries and Record Results
        run: | 
          touch response.txt
          while read -r line
          do
            echo "query: $line" >> response.txt
            response_body=$(curl -s -w "\n%{http_code}" "${{ env.BOOKS_URL }}$line")
            status_code=$(echo "$response_body" | tail -n1)
            response_body=$(echo "$response_body" | head -n -1)
            
            if [[ "$status_code" -eq 200 ]]; then
              echo "response: $response_body" >> response.txt
            else
              echo "response: error $status_code" >> response.txt
            fi
          done < query.txt

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: query_results
          path: response.txt


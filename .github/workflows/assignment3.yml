on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Record start time and names
      run: |
        echo "$(date -Iminutes)" > log.txt
        echo "Maya Ben Zeev, Noga Brenner, Eden Zehavy" >> log.txt

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        if docker build -t books-service:latest -f ./book-service/Dockerfile ./book-service; then
          echo "image successfully built" >> log.txt
          docker save books-service:latest -o /tmp/image.tar
        else
          echo "image not able to be built" >> log.txt
          exit 1

    - name: Upload image and logs
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          /tmp/image.tar
          log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: /tmp

    - name: Load Docker image
      run: |
        docker load --input /tmp/image.tar
        docker run -d --name books-service -p 5001:80 books-service:latest
        echo "Container up and running" >> /tmp/log.txt

    - name: Check container and Execute pytest
      run: |
        docker ps
        if docker exec books-service ls -laR /app; then
          if docker exec books-service python -m pytest -v /app/tests/; then
            echo "tests succeeded" >> /tmp/log.txt
          else
            echo "tests failed" >> /tmp/log.txt
            exit 1
          fi
        else
          echo "Directory /app/tests not found" >> /tmp/log.txt
          exit 1

    - name: Upload test results and logs
      uses: actions/upload-artifact@v4
      with:
        name: test-results-and-logs
        path: /tmp/log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    env:
      BOOKS_URL: 'http://127.0.0.1:5001/books'
    steps:
    - uses: actions/checkout@v4

    - name: Start Docker Compose
      run: |
        docker-compose up -d

    - name: Initialize Data and Issue Queries
      run: |
        for isbn in "9780520343641" "9780385050784" "9780394558783" "9780195810400" "9780553294385" "9780553293364"; do
          curl -X POST -H "Content-Type: application/json" -d "{\"title\": \"$(jq -r '.title' book-data/$isbn.json)\", \"ISBN\": \"$isbn\", \"genre\": \"$(jq -r '.genre' book-data/$isbn.json)\"}" ${{ env.BOOKS_URL }}
        done

        touch response.txt
        while read -r line; do
          echo "query: $line" >> response.txt
          response=$(curl -s -w "\n%{http_code}" "${{ env.BOOKS_URL }}$line")
          echo "response: ${response%$'\n'*}" >> response.txt
        done < query.txt

    - name: Upload Query Results
      uses: actions/upload-artifact@v3
      with:
        name: query_results
        path: response.txt
